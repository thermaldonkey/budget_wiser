require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WithdrawalsController do

  # This should return the minimal set of attributes required to create a valid
  # Withdrawal. As you add validations to Withdrawal, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "value" => "1.5" } }

  let(:user) { create(:user) }
  let(:pay_period) { create(:pay_period, user_id: user.id) }

  before { sign_in user }

  describe "GET index" do
    context "when the current user has a current pay period" do
      it "assigns all withdrawals as @withdrawals" do
        pay_period = create(:pay_period, user: user, start_date: Date.today, end_date: Date.today + 2)
        withdrawal = create(:withdrawal, pay_period: pay_period)
        get :index, {}
        assigns(:withdrawals).should eq([withdrawal])
      end
    end

    context "when the current user doesn't have a current pay period" do
      it "renders the pay_periods#missing template" do
        pay_period = create(:pay_period, user: user, start_date: Date.today - 4, end_date: Date.today - 2)
        withdrawal = create(:withdrawal, pay_period: pay_period)
        get :index, {}
        response.should render_template("pay_periods/missing")
      end
    end
  end

  describe "GET show" do
    it "should not respond" do
      withdrawal = Withdrawal.create! valid_attributes
      expect{
        get :show, {:id => withdrawal.to_param}
      }.to raise_error(ActionController::RoutingError)
    end
  end

  describe "GET new" do
    it "assigns a new withdrawal as @withdrawal" do
      get :new, {}
      assigns(:withdrawal).should be_a_new(Withdrawal)
    end
  end

  describe "GET edit" do
    it "assigns the requested withdrawal as @withdrawal" do
      withdrawal = Withdrawal.create! valid_attributes
      get :edit, {:id => withdrawal.to_param}
      assigns(:withdrawal).should eq(withdrawal)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Withdrawal" do
        expect {
          post :create, {:withdrawal => valid_attributes.merge({pay_period_id: pay_period.id})}
        }.to change(Withdrawal, :count).by(1)
      end

      it "assigns a newly created withdrawal as @withdrawal" do
        post :create, {:withdrawal => valid_attributes.merge({pay_period_id: pay_period.id})}
        assigns(:withdrawal).should be_a(Withdrawal)
        assigns(:withdrawal).should be_persisted
      end

      it "redirects to the pay period of the created withdrawal" do
        post :create, {:withdrawal => valid_attributes.merge({pay_period_id: pay_period.id})}
        response.should redirect_to(Withdrawal.last.pay_period)
      end
    end

    describe "with invalid params" do
      let!(:pay_period) { create(:pay_period, user: user, start_date: Date.today, end_date: Date.today + 2) }

      it "assigns a newly created but unsaved withdrawal as @withdrawal" do
        # Trigger the behavior that occurs when invalid params are submitted
        Withdrawal.any_instance.stub(:save).and_return(false)
        post :create, {:withdrawal => { "value" => "invalid value" }}
        assigns(:withdrawal).should be_a_new(Withdrawal)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Withdrawal.any_instance.stub(:save).and_return(false)
        post :create, {:withdrawal => { "value" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested withdrawal" do
        withdrawal = Withdrawal.create! valid_attributes
        # Assuming there are no other withdrawals in the database, this
        # specifies that the Withdrawal created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Withdrawal.any_instance.should_receive(:update_attributes).with({ "value" => "1.5" })
        put :update, {:id => withdrawal.to_param, :withdrawal => { "value" => "1.5" }}
      end

      it "assigns the requested withdrawal as @withdrawal" do
        withdrawal = Withdrawal.create! valid_attributes
        put :update, {:id => withdrawal.to_param, :withdrawal => valid_attributes}
        assigns(:withdrawal).should eq(withdrawal)
      end

      it "redirects to the withdrawals index" do
        withdrawal = Withdrawal.create! valid_attributes
        put :update, {:id => withdrawal.to_param, :withdrawal => valid_attributes}
        response.should redirect_to(action: :index, notice: 'Withdrawal was successfully updated.')
      end
    end

    describe "with invalid params" do
      it "assigns the withdrawal as @withdrawal" do
        withdrawal = Withdrawal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Withdrawal.any_instance.stub(:save).and_return(false)
        put :update, {:id => withdrawal.to_param, :withdrawal => { "value" => "invalid value" }}
        assigns(:withdrawal).should eq(withdrawal)
      end

      it "re-renders the 'edit' template" do
        withdrawal = Withdrawal.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Withdrawal.any_instance.stub(:save).and_return(false)
        put :update, {:id => withdrawal.to_param, :withdrawal => { "value" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested withdrawal" do
      withdrawal = Withdrawal.create! valid_attributes
      expect {
        delete :destroy, {:id => withdrawal.to_param}
      }.to change(Withdrawal, :count).by(-1)
    end

    it "redirects to the withdrawals list" do
      withdrawal = Withdrawal.create! valid_attributes
      delete :destroy, {:id => withdrawal.to_param}
      response.should redirect_to(withdrawals_url)
    end
  end

end
